# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime

class GetFabricNetworkResult(object):
    """
    A collection of values returned by getFabricNetwork.
    """
    def __init__(__self__, description=None, fabric=None, gateway=None, internet_nat=None, provision_end_ip=None, provision_start_ip=None, public=None, resolvers=None, routes=None, subnet=None, id=None):
        if description and not isinstance(description, basestring):
            raise TypeError('Expected argument description to be a basestring')
        __self__.description = description
        if fabric and not isinstance(fabric, bool):
            raise TypeError('Expected argument fabric to be a bool')
        __self__.fabric = fabric
        if gateway and not isinstance(gateway, basestring):
            raise TypeError('Expected argument gateway to be a basestring')
        __self__.gateway = gateway
        if internet_nat and not isinstance(internet_nat, bool):
            raise TypeError('Expected argument internet_nat to be a bool')
        __self__.internet_nat = internet_nat
        if provision_end_ip and not isinstance(provision_end_ip, basestring):
            raise TypeError('Expected argument provision_end_ip to be a basestring')
        __self__.provision_end_ip = provision_end_ip
        if provision_start_ip and not isinstance(provision_start_ip, basestring):
            raise TypeError('Expected argument provision_start_ip to be a basestring')
        __self__.provision_start_ip = provision_start_ip
        if public and not isinstance(public, bool):
            raise TypeError('Expected argument public to be a bool')
        __self__.public = public
        if resolvers and not isinstance(resolvers, list):
            raise TypeError('Expected argument resolvers to be a list')
        __self__.resolvers = resolvers
        if routes and not isinstance(routes, dict):
            raise TypeError('Expected argument routes to be a dict')
        __self__.routes = routes
        if subnet and not isinstance(subnet, basestring):
            raise TypeError('Expected argument subnet to be a basestring')
        __self__.subnet = subnet
        if id and not isinstance(id, basestring):
            raise TypeError('Expected argument id to be a basestring')
        __self__.id = id
        """
        id is the provider-assigned unique ID for this managed resource.
        """

def get_fabric_network(name=None, vlan_id=None):
    __args__ = dict()

    __args__['name'] = name
    __args__['vlanId'] = vlan_id
    __ret__ = pulumi.runtime.invoke('triton:index/getFabricNetwork:getFabricNetwork', __args__)

    return GetFabricNetworkResult(
        description=__ret__.get('description'),
        fabric=__ret__.get('fabric'),
        gateway=__ret__.get('gateway'),
        internet_nat=__ret__.get('internetNat'),
        provision_end_ip=__ret__.get('provisionEndIp'),
        provision_start_ip=__ret__.get('provisionStartIp'),
        public=__ret__.get('public'),
        resolvers=__ret__.get('resolvers'),
        routes=__ret__.get('routes'),
        subnet=__ret__.get('subnet'),
        id=__ret__.get('id'))

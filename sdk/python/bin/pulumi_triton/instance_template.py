# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime

class InstanceTemplate(pulumi.CustomResource):
    def __init__(__self__, __name__, __opts__=None, firewall_enabled=None, image=None, metadata=None, networks=None, package=None, tags=None, template_name=None, userdata=None):
        """Create a InstanceTemplate resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if firewall_enabled and not isinstance(firewall_enabled, bool):
            raise TypeError('Expected property firewall_enabled to be a bool')
        __self__.firewall_enabled = firewall_enabled
        """
        Whether to enable the firewall for group instances
        """
        __props__['firewallEnabled'] = firewall_enabled

        if not image:
            raise TypeError('Missing required property image')
        elif not isinstance(image, basestring):
            raise TypeError('Expected property image to be a basestring')
        __self__.image = image
        """
        UUID of the image
        """
        __props__['image'] = image

        if metadata and not isinstance(metadata, dict):
            raise TypeError('Expected property metadata to be a dict')
        __self__.metadata = metadata
        """
        Metadata for group instances
        """
        __props__['metadata'] = metadata

        if networks and not isinstance(networks, list):
            raise TypeError('Expected property networks to be a list')
        __self__.networks = networks
        """
        Network IDs for group instances
        """
        __props__['networks'] = networks

        if not package:
            raise TypeError('Missing required property package')
        elif not isinstance(package, basestring):
            raise TypeError('Expected property package to be a basestring')
        __self__.package = package
        """
        Package name used for provisioning
        """
        __props__['package'] = package

        if tags and not isinstance(tags, dict):
            raise TypeError('Expected property tags to be a dict')
        __self__.tags = tags
        """
        Tags for group instances
        """
        __props__['tags'] = tags

        if not template_name:
            raise TypeError('Missing required property template_name')
        elif not isinstance(template_name, basestring):
            raise TypeError('Expected property template_name to be a basestring')
        __self__.template_name = template_name
        """
        Friendly name for the instance template
        """
        __props__['templateName'] = template_name

        if userdata and not isinstance(userdata, basestring):
            raise TypeError('Expected property userdata to be a basestring')
        __self__.userdata = userdata
        """
        Data copied to instance on boot
        """
        __props__['userdata'] = userdata

        super(InstanceTemplate, __self__).__init__(
            'triton:index/instanceTemplate:InstanceTemplate',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'firewallEnabled' in outs:
            self.firewall_enabled = outs['firewallEnabled']
        if 'image' in outs:
            self.image = outs['image']
        if 'metadata' in outs:
            self.metadata = outs['metadata']
        if 'networks' in outs:
            self.networks = outs['networks']
        if 'package' in outs:
            self.package = outs['package']
        if 'tags' in outs:
            self.tags = outs['tags']
        if 'templateName' in outs:
            self.template_name = outs['templateName']
        if 'userdata' in outs:
            self.userdata = outs['userdata']

# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime

class GetPackageResult(object):
    """
    A collection of values returned by getPackage.
    """
    def __init__(__self__, disk=None, group=None, lwps=None, memory=None, name=None, swap=None, vcpus=None, version=None, id=None):
        if disk and not isinstance(disk, int):
            raise TypeError('Expected argument disk to be a int')
        __self__.disk = disk
        if group and not isinstance(group, basestring):
            raise TypeError('Expected argument group to be a basestring')
        __self__.group = group
        if lwps and not isinstance(lwps, int):
            raise TypeError('Expected argument lwps to be a int')
        __self__.lwps = lwps
        if memory and not isinstance(memory, int):
            raise TypeError('Expected argument memory to be a int')
        __self__.memory = memory
        if name and not isinstance(name, basestring):
            raise TypeError('Expected argument name to be a basestring')
        __self__.name = name
        if swap and not isinstance(swap, int):
            raise TypeError('Expected argument swap to be a int')
        __self__.swap = swap
        if vcpus and not isinstance(vcpus, int):
            raise TypeError('Expected argument vcpus to be a int')
        __self__.vcpus = vcpus
        if version and not isinstance(version, basestring):
            raise TypeError('Expected argument version to be a basestring')
        __self__.version = version
        if id and not isinstance(id, basestring):
            raise TypeError('Expected argument id to be a basestring')
        __self__.id = id
        """
        id is the provider-assigned unique ID for this managed resource.
        """

def get_package(filters=None):
    __args__ = dict()

    __args__['filters'] = filters
    __ret__ = pulumi.runtime.invoke('triton:index/getPackage:getPackage', __args__)

    return GetPackageResult(
        disk=__ret__.get('disk'),
        group=__ret__.get('group'),
        lwps=__ret__.get('lwps'),
        memory=__ret__.get('memory'),
        name=__ret__.get('name'),
        swap=__ret__.get('swap'),
        vcpus=__ret__.get('vcpus'),
        version=__ret__.get('version'),
        id=__ret__.get('id'))

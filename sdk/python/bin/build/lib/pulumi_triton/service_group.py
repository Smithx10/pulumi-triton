# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime

class ServiceGroup(pulumi.CustomResource):
    def __init__(__self__, __name__, __opts__=None, capacity=None, group_name=None, template=None):
        """Create a ServiceGroup resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if capacity and not isinstance(capacity, int):
            raise TypeError('Expected property capacity to be a int')
        __self__.capacity = capacity
        """
        Number of instances to launch and monitor
        """
        __props__['capacity'] = capacity

        if not group_name:
            raise TypeError('Missing required property group_name')
        elif not isinstance(group_name, basestring):
            raise TypeError('Expected property group_name to be a basestring')
        __self__.group_name = group_name
        """
        Friendly name for the service group
        """
        __props__['groupName'] = group_name

        if not template:
            raise TypeError('Missing required property template')
        elif not isinstance(template, basestring):
            raise TypeError('Expected property template to be a basestring')
        __self__.template = template
        """
        Identifier of an instance template
        """
        __props__['template'] = template

        super(ServiceGroup, __self__).__init__(
            'triton:index/serviceGroup:ServiceGroup',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'capacity' in outs:
            self.capacity = outs['capacity']
        if 'groupName' in outs:
            self.group_name = outs['groupName']
        if 'template' in outs:
            self.template = outs['template']

// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package triton

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type Fabric struct {
	s *pulumi.ResourceState
}

// NewFabric registers a new resource with the given unique name, arguments, and options.
func NewFabric(ctx *pulumi.Context,
	name string, args *FabricArgs, opts ...pulumi.ResourceOpt) (*Fabric, error) {
	if args == nil || args.ProvisionEndIp == nil {
		return nil, errors.New("missing required argument 'ProvisionEndIp'")
	}
	if args == nil || args.ProvisionStartIp == nil {
		return nil, errors.New("missing required argument 'ProvisionStartIp'")
	}
	if args == nil || args.Subnet == nil {
		return nil, errors.New("missing required argument 'Subnet'")
	}
	if args == nil || args.VlanId == nil {
		return nil, errors.New("missing required argument 'VlanId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["description"] = nil
		inputs["gateway"] = nil
		inputs["internetNat"] = nil
		inputs["name"] = nil
		inputs["provisionEndIp"] = nil
		inputs["provisionStartIp"] = nil
		inputs["resolvers"] = nil
		inputs["routes"] = nil
		inputs["subnet"] = nil
		inputs["vlanId"] = nil
	} else {
		inputs["description"] = args.Description
		inputs["gateway"] = args.Gateway
		inputs["internetNat"] = args.InternetNat
		inputs["name"] = args.Name
		inputs["provisionEndIp"] = args.ProvisionEndIp
		inputs["provisionStartIp"] = args.ProvisionStartIp
		inputs["resolvers"] = args.Resolvers
		inputs["routes"] = args.Routes
		inputs["subnet"] = args.Subnet
		inputs["vlanId"] = args.VlanId
	}
	inputs["fabric"] = nil
	inputs["public"] = nil
	s, err := ctx.RegisterResource("triton:index/fabric:Fabric", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Fabric{s: s}, nil
}

// GetFabric gets an existing Fabric resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFabric(ctx *pulumi.Context,
	name string, id pulumi.ID, state *FabricState, opts ...pulumi.ResourceOpt) (*Fabric, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["description"] = state.Description
		inputs["fabric"] = state.Fabric
		inputs["gateway"] = state.Gateway
		inputs["internetNat"] = state.InternetNat
		inputs["name"] = state.Name
		inputs["provisionEndIp"] = state.ProvisionEndIp
		inputs["provisionStartIp"] = state.ProvisionStartIp
		inputs["public"] = state.Public
		inputs["resolvers"] = state.Resolvers
		inputs["routes"] = state.Routes
		inputs["subnet"] = state.Subnet
		inputs["vlanId"] = state.VlanId
	}
	s, err := ctx.ReadResource("triton:index/fabric:Fabric", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Fabric{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Fabric) URN() *pulumi.URNOutput {
	return r.s.URN
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Fabric) ID() *pulumi.IDOutput {
	return r.s.ID
}

// Description of network
func (r *Fabric) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// Whether or not this network is on a fabric
func (r *Fabric) Fabric() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["fabric"])
}

// Gateway IP
func (r *Fabric) Gateway() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["gateway"])
}

// Whether or not a NAT zone is provisioned at the Gateway IP address
func (r *Fabric) InternetNat() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["internetNat"])
}

// Network name
func (r *Fabric) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// Last assignable IP on the network
func (r *Fabric) ProvisionEndIp() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["provisionEndIp"])
}

// First IP on the network that can be assigned
func (r *Fabric) ProvisionStartIp() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["provisionStartIp"])
}

// Whether or not this is an RFC1918 network
func (r *Fabric) Public() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["public"])
}

// List of IP addresses for DNS resolvers
func (r *Fabric) Resolvers() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["resolvers"])
}

// Map of CIDR block to Gateway IP address
func (r *Fabric) Routes() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["routes"])
}

// CIDR formatted string describing network address space
func (r *Fabric) Subnet() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["subnet"])
}

// VLAN on which the network exists
func (r *Fabric) VlanId() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["vlanId"])
}

// Input properties used for looking up and filtering Fabric resources.
type FabricState struct {
	// Description of network
	Description interface{}
	// Whether or not this network is on a fabric
	Fabric interface{}
	// Gateway IP
	Gateway interface{}
	// Whether or not a NAT zone is provisioned at the Gateway IP address
	InternetNat interface{}
	// Network name
	Name interface{}
	// Last assignable IP on the network
	ProvisionEndIp interface{}
	// First IP on the network that can be assigned
	ProvisionStartIp interface{}
	// Whether or not this is an RFC1918 network
	Public interface{}
	// List of IP addresses for DNS resolvers
	Resolvers interface{}
	// Map of CIDR block to Gateway IP address
	Routes interface{}
	// CIDR formatted string describing network address space
	Subnet interface{}
	// VLAN on which the network exists
	VlanId interface{}
}

// The set of arguments for constructing a Fabric resource.
type FabricArgs struct {
	// Description of network
	Description interface{}
	// Gateway IP
	Gateway interface{}
	// Whether or not a NAT zone is provisioned at the Gateway IP address
	InternetNat interface{}
	// Network name
	Name interface{}
	// Last assignable IP on the network
	ProvisionEndIp interface{}
	// First IP on the network that can be assigned
	ProvisionStartIp interface{}
	// List of IP addresses for DNS resolvers
	Resolvers interface{}
	// Map of CIDR block to Gateway IP address
	Routes interface{}
	// CIDR formatted string describing network address space
	Subnet interface{}
	// VLAN on which the network exists
	VlanId interface{}
}

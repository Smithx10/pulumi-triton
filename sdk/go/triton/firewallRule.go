// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package triton

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type FirewallRule struct {
	s *pulumi.ResourceState
}

// NewFirewallRule registers a new resource with the given unique name, arguments, and options.
func NewFirewallRule(ctx *pulumi.Context,
	name string, args *FirewallRuleArgs, opts ...pulumi.ResourceOpt) (*FirewallRule, error) {
	if args == nil || args.Rule == nil {
		return nil, errors.New("missing required argument 'Rule'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["description"] = nil
		inputs["enabled"] = nil
		inputs["rule"] = nil
	} else {
		inputs["description"] = args.Description
		inputs["enabled"] = args.Enabled
		inputs["rule"] = args.Rule
	}
	inputs["global"] = nil
	s, err := ctx.RegisterResource("triton:index/firewallRule:FirewallRule", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &FirewallRule{s: s}, nil
}

// GetFirewallRule gets an existing FirewallRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFirewallRule(ctx *pulumi.Context,
	name string, id pulumi.ID, state *FirewallRuleState, opts ...pulumi.ResourceOpt) (*FirewallRule, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["description"] = state.Description
		inputs["enabled"] = state.Enabled
		inputs["global"] = state.Global
		inputs["rule"] = state.Rule
	}
	s, err := ctx.ReadResource("triton:index/firewallRule:FirewallRule", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &FirewallRule{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *FirewallRule) URN() *pulumi.URNOutput {
	return r.s.URN
}

// ID is this resource's unique identifier assigned by its provider.
func (r *FirewallRule) ID() *pulumi.IDOutput {
	return r.s.ID
}

// Human-readable description of the rule
func (r *FirewallRule) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// Indicates if the rule is enabled
func (r *FirewallRule) Enabled() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["enabled"])
}

// Indicates whether or not the rule is global
func (r *FirewallRule) Global() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["global"])
}

// firewall rule text
func (r *FirewallRule) Rule() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["rule"])
}

// Input properties used for looking up and filtering FirewallRule resources.
type FirewallRuleState struct {
	// Human-readable description of the rule
	Description interface{}
	// Indicates if the rule is enabled
	Enabled interface{}
	// Indicates whether or not the rule is global
	Global interface{}
	// firewall rule text
	Rule interface{}
}

// The set of arguments for constructing a FirewallRule resource.
type FirewallRuleArgs struct {
	// Human-readable description of the rule
	Description interface{}
	// Indicates if the rule is enabled
	Enabled interface{}
	// firewall rule text
	Rule interface{}
}

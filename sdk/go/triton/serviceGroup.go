// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package triton

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type ServiceGroup struct {
	s *pulumi.ResourceState
}

// NewServiceGroup registers a new resource with the given unique name, arguments, and options.
func NewServiceGroup(ctx *pulumi.Context,
	name string, args *ServiceGroupArgs, opts ...pulumi.ResourceOpt) (*ServiceGroup, error) {
	if args == nil || args.GroupName == nil {
		return nil, errors.New("missing required argument 'GroupName'")
	}
	if args == nil || args.Template == nil {
		return nil, errors.New("missing required argument 'Template'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["capacity"] = nil
		inputs["groupName"] = nil
		inputs["template"] = nil
	} else {
		inputs["capacity"] = args.Capacity
		inputs["groupName"] = args.GroupName
		inputs["template"] = args.Template
	}
	s, err := ctx.RegisterResource("triton:index/serviceGroup:ServiceGroup", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ServiceGroup{s: s}, nil
}

// GetServiceGroup gets an existing ServiceGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceGroup(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ServiceGroupState, opts ...pulumi.ResourceOpt) (*ServiceGroup, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["capacity"] = state.Capacity
		inputs["groupName"] = state.GroupName
		inputs["template"] = state.Template
	}
	s, err := ctx.ReadResource("triton:index/serviceGroup:ServiceGroup", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ServiceGroup{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *ServiceGroup) URN() *pulumi.URNOutput {
	return r.s.URN
}

// ID is this resource's unique identifier assigned by its provider.
func (r *ServiceGroup) ID() *pulumi.IDOutput {
	return r.s.ID
}

// Number of instances to launch and monitor
func (r *ServiceGroup) Capacity() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["capacity"])
}

// Friendly name for the service group
func (r *ServiceGroup) GroupName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["groupName"])
}

// Identifier of an instance template
func (r *ServiceGroup) Template() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["template"])
}

// Input properties used for looking up and filtering ServiceGroup resources.
type ServiceGroupState struct {
	// Number of instances to launch and monitor
	Capacity interface{}
	// Friendly name for the service group
	GroupName interface{}
	// Identifier of an instance template
	Template interface{}
}

// The set of arguments for constructing a ServiceGroup resource.
type ServiceGroupArgs struct {
	// Number of instances to launch and monitor
	Capacity interface{}
	// Friendly name for the service group
	GroupName interface{}
	// Identifier of an instance template
	Template interface{}
}

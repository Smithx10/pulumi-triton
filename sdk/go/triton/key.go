// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package triton

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type Key struct {
	s *pulumi.ResourceState
}

// NewKey registers a new resource with the given unique name, arguments, and options.
func NewKey(ctx *pulumi.Context,
	name string, args *KeyArgs, opts ...pulumi.ResourceOpt) (*Key, error) {
	if args == nil || args.Key == nil {
		return nil, errors.New("missing required argument 'Key'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["key"] = nil
		inputs["name"] = nil
	} else {
		inputs["key"] = args.Key
		inputs["name"] = args.Name
	}
	s, err := ctx.RegisterResource("triton:index/key:Key", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Key{s: s}, nil
}

// GetKey gets an existing Key resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKey(ctx *pulumi.Context,
	name string, id pulumi.ID, state *KeyState, opts ...pulumi.ResourceOpt) (*Key, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["key"] = state.Key
		inputs["name"] = state.Name
	}
	s, err := ctx.ReadResource("triton:index/key:Key", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Key{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Key) URN() *pulumi.URNOutput {
	return r.s.URN
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Key) ID() *pulumi.IDOutput {
	return r.s.ID
}

// Content of public key from disk in OpenSSH format
func (r *Key) Key() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["key"])
}

// Name of the key (generated from the key comment if not set)
func (r *Key) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// Input properties used for looking up and filtering Key resources.
type KeyState struct {
	// Content of public key from disk in OpenSSH format
	Key interface{}
	// Name of the key (generated from the key comment if not set)
	Name interface{}
}

// The set of arguments for constructing a Key resource.
type KeyArgs struct {
	// Content of public key from disk in OpenSSH format
	Key interface{}
	// Name of the key (generated from the key comment if not set)
	Name interface{}
}

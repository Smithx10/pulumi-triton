// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package triton

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type InstanceTemplate struct {
	s *pulumi.ResourceState
}

// NewInstanceTemplate registers a new resource with the given unique name, arguments, and options.
func NewInstanceTemplate(ctx *pulumi.Context,
	name string, args *InstanceTemplateArgs, opts ...pulumi.ResourceOpt) (*InstanceTemplate, error) {
	if args == nil || args.Image == nil {
		return nil, errors.New("missing required argument 'Image'")
	}
	if args == nil || args.Package == nil {
		return nil, errors.New("missing required argument 'Package'")
	}
	if args == nil || args.TemplateName == nil {
		return nil, errors.New("missing required argument 'TemplateName'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["firewallEnabled"] = nil
		inputs["image"] = nil
		inputs["metadata"] = nil
		inputs["networks"] = nil
		inputs["package"] = nil
		inputs["tags"] = nil
		inputs["templateName"] = nil
		inputs["userdata"] = nil
	} else {
		inputs["firewallEnabled"] = args.FirewallEnabled
		inputs["image"] = args.Image
		inputs["metadata"] = args.Metadata
		inputs["networks"] = args.Networks
		inputs["package"] = args.Package
		inputs["tags"] = args.Tags
		inputs["templateName"] = args.TemplateName
		inputs["userdata"] = args.Userdata
	}
	s, err := ctx.RegisterResource("triton:index/instanceTemplate:InstanceTemplate", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &InstanceTemplate{s: s}, nil
}

// GetInstanceTemplate gets an existing InstanceTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstanceTemplate(ctx *pulumi.Context,
	name string, id pulumi.ID, state *InstanceTemplateState, opts ...pulumi.ResourceOpt) (*InstanceTemplate, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["firewallEnabled"] = state.FirewallEnabled
		inputs["image"] = state.Image
		inputs["metadata"] = state.Metadata
		inputs["networks"] = state.Networks
		inputs["package"] = state.Package
		inputs["tags"] = state.Tags
		inputs["templateName"] = state.TemplateName
		inputs["userdata"] = state.Userdata
	}
	s, err := ctx.ReadResource("triton:index/instanceTemplate:InstanceTemplate", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &InstanceTemplate{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *InstanceTemplate) URN() *pulumi.URNOutput {
	return r.s.URN
}

// ID is this resource's unique identifier assigned by its provider.
func (r *InstanceTemplate) ID() *pulumi.IDOutput {
	return r.s.ID
}

// Whether to enable the firewall for group instances
func (r *InstanceTemplate) FirewallEnabled() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["firewallEnabled"])
}

// UUID of the image
func (r *InstanceTemplate) Image() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["image"])
}

// Metadata for group instances
func (r *InstanceTemplate) Metadata() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["metadata"])
}

// Network IDs for group instances
func (r *InstanceTemplate) Networks() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["networks"])
}

// Package name used for provisioning
func (r *InstanceTemplate) Package() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["package"])
}

// Tags for group instances
func (r *InstanceTemplate) Tags() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["tags"])
}

// Friendly name for the instance template
func (r *InstanceTemplate) TemplateName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["templateName"])
}

// Data copied to instance on boot
func (r *InstanceTemplate) Userdata() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["userdata"])
}

// Input properties used for looking up and filtering InstanceTemplate resources.
type InstanceTemplateState struct {
	// Whether to enable the firewall for group instances
	FirewallEnabled interface{}
	// UUID of the image
	Image interface{}
	// Metadata for group instances
	Metadata interface{}
	// Network IDs for group instances
	Networks interface{}
	// Package name used for provisioning
	Package interface{}
	// Tags for group instances
	Tags interface{}
	// Friendly name for the instance template
	TemplateName interface{}
	// Data copied to instance on boot
	Userdata interface{}
}

// The set of arguments for constructing a InstanceTemplate resource.
type InstanceTemplateArgs struct {
	// Whether to enable the firewall for group instances
	FirewallEnabled interface{}
	// UUID of the image
	Image interface{}
	// Metadata for group instances
	Metadata interface{}
	// Network IDs for group instances
	Networks interface{}
	// Package name used for provisioning
	Package interface{}
	// Tags for group instances
	Tags interface{}
	// Friendly name for the instance template
	TemplateName interface{}
	// Data copied to instance on boot
	Userdata interface{}
}

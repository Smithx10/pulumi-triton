// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";

export class Machine extends pulumi.CustomResource {
    /**
     * Get an existing Machine resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MachineState): Machine {
        return new Machine(name, <any>state, { id });
    }

    /**
     * Administrator's initial password (Windows only)
     */
    public readonly administratorPw: pulumi.Output<string | undefined>;
    /**
     * Label based affinity rules for assisting instance placement
     */
    public readonly affinities: pulumi.Output<string[] | undefined>;
    /**
     * copied to machine on boot
     */
    public readonly cloudConfig: pulumi.Output<string | undefined>;
    /**
     * Container Name Service
     */
    public readonly cns: pulumi.Output<{ disable?: boolean, services?: string[] } | undefined>;
    /**
     * UUID of the server on which the instance is located
     */
    public /*out*/ readonly computeNode: pulumi.Output<string>;
    /**
     * When the machine was created
     */
    public /*out*/ readonly created: pulumi.Output<string>;
    /**
     * Dataset URN with which the machine was provisioned
     */
    public /*out*/ readonly dataset: pulumi.Output<string>;
    /**
     * Whether to enable deletion protection for this machine
     */
    public readonly deletionProtectionEnabled: pulumi.Output<boolean | undefined>;
    /**
     * Amount of disk allocated to the machine (in Gb)
     */
    public /*out*/ readonly disk: pulumi.Output<number>;
    /**
     * List of domain names from Triton CNS
     */
    public /*out*/ readonly domainNames: pulumi.Output<string[]>;
    /**
     * Whether to enable the firewall for this machine
     */
    public readonly firewallEnabled: pulumi.Output<boolean | undefined>;
    /**
     * UUID of the image
     */
    public readonly image: pulumi.Output<string>;
    /**
     * IP addresses assigned to the machine
     */
    public /*out*/ readonly ips: pulumi.Output<string[]>;
    /**
     * UUID based locality hints for assisting placement behavior
     */
    public readonly locality: pulumi.Output<{ closeTos?: string[], farFroms?: string[] } | undefined>;
    /**
     * Amount of memory allocated to the machine (in Mb)
     */
    public /*out*/ readonly memory: pulumi.Output<number>;
    /**
     * Machine metadata
     */
    public readonly metadata: pulumi.Output<{[key: string]: any} | undefined>;
    /**
     * Friendly name for machine
     */
    public readonly name: pulumi.Output<string>;
    /**
     * Desired network IDs
     */
    public readonly networks: pulumi.Output<string[] | undefined>;
    /**
     * Network interface
     */
    public readonly nics: pulumi.Output<{ gateway: string, ip: string, mac: string, netmask: string, network: string, primary: boolean, state: string }[]>;
    /**
     * The package for use for provisioning
     */
    public readonly package: pulumi.Output<string>;
    /**
     * Primary (public) IP address for the machine
     */
    public /*out*/ readonly primaryip: pulumi.Output<string>;
    /**
     * Authorized keys for the root user on this machine
     */
    public readonly rootAuthorizedKeys: pulumi.Output<string>;
    /**
     * Machine tags
     */
    public readonly tags: pulumi.Output<{[key: string]: any} | undefined>;
    /**
     * Machine type (smartmachine or virtualmachine)
     */
    public /*out*/ readonly type: pulumi.Output<string>;
    /**
     * When the machine was updated
     */
    public /*out*/ readonly updated: pulumi.Output<string>;
    /**
     * Data copied to machine on boot
     */
    public readonly userData: pulumi.Output<string | undefined>;
    /**
     * User script to run on boot (every boot on SmartMachines)
     */
    public readonly userScript: pulumi.Output<string | undefined>;

    /**
     * Create a Machine resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MachineArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MachineArgs | MachineState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: MachineState = argsOrState as MachineState | undefined;
            inputs["administratorPw"] = state ? state.administratorPw : undefined;
            inputs["affinities"] = state ? state.affinities : undefined;
            inputs["cloudConfig"] = state ? state.cloudConfig : undefined;
            inputs["cns"] = state ? state.cns : undefined;
            inputs["computeNode"] = state ? state.computeNode : undefined;
            inputs["created"] = state ? state.created : undefined;
            inputs["dataset"] = state ? state.dataset : undefined;
            inputs["deletionProtectionEnabled"] = state ? state.deletionProtectionEnabled : undefined;
            inputs["disk"] = state ? state.disk : undefined;
            inputs["domainNames"] = state ? state.domainNames : undefined;
            inputs["firewallEnabled"] = state ? state.firewallEnabled : undefined;
            inputs["image"] = state ? state.image : undefined;
            inputs["ips"] = state ? state.ips : undefined;
            inputs["locality"] = state ? state.locality : undefined;
            inputs["memory"] = state ? state.memory : undefined;
            inputs["metadata"] = state ? state.metadata : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["networks"] = state ? state.networks : undefined;
            inputs["nics"] = state ? state.nics : undefined;
            inputs["package"] = state ? state.package : undefined;
            inputs["primaryip"] = state ? state.primaryip : undefined;
            inputs["rootAuthorizedKeys"] = state ? state.rootAuthorizedKeys : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["type"] = state ? state.type : undefined;
            inputs["updated"] = state ? state.updated : undefined;
            inputs["userData"] = state ? state.userData : undefined;
            inputs["userScript"] = state ? state.userScript : undefined;
        } else {
            const args = argsOrState as MachineArgs | undefined;
            if (!args || args.image === undefined) {
                throw new Error("Missing required property 'image'");
            }
            if (!args || args.package === undefined) {
                throw new Error("Missing required property 'package'");
            }
            inputs["administratorPw"] = args ? args.administratorPw : undefined;
            inputs["affinities"] = args ? args.affinities : undefined;
            inputs["cloudConfig"] = args ? args.cloudConfig : undefined;
            inputs["cns"] = args ? args.cns : undefined;
            inputs["deletionProtectionEnabled"] = args ? args.deletionProtectionEnabled : undefined;
            inputs["firewallEnabled"] = args ? args.firewallEnabled : undefined;
            inputs["image"] = args ? args.image : undefined;
            inputs["locality"] = args ? args.locality : undefined;
            inputs["metadata"] = args ? args.metadata : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["networks"] = args ? args.networks : undefined;
            inputs["nics"] = args ? args.nics : undefined;
            inputs["package"] = args ? args.package : undefined;
            inputs["rootAuthorizedKeys"] = args ? args.rootAuthorizedKeys : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["userData"] = args ? args.userData : undefined;
            inputs["userScript"] = args ? args.userScript : undefined;
            inputs["computeNode"] = undefined /*out*/;
            inputs["created"] = undefined /*out*/;
            inputs["dataset"] = undefined /*out*/;
            inputs["disk"] = undefined /*out*/;
            inputs["domainNames"] = undefined /*out*/;
            inputs["ips"] = undefined /*out*/;
            inputs["memory"] = undefined /*out*/;
            inputs["primaryip"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
            inputs["updated"] = undefined /*out*/;
        }
        super("triton:index/machine:Machine", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Machine resources.
 */
export interface MachineState {
    /**
     * Administrator's initial password (Windows only)
     */
    readonly administratorPw?: pulumi.Input<string>;
    /**
     * Label based affinity rules for assisting instance placement
     */
    readonly affinities?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * copied to machine on boot
     */
    readonly cloudConfig?: pulumi.Input<string>;
    /**
     * Container Name Service
     */
    readonly cns?: pulumi.Input<{ disable?: pulumi.Input<boolean>, services?: pulumi.Input<pulumi.Input<string>[]> }>;
    /**
     * UUID of the server on which the instance is located
     */
    readonly computeNode?: pulumi.Input<string>;
    /**
     * When the machine was created
     */
    readonly created?: pulumi.Input<string>;
    /**
     * Dataset URN with which the machine was provisioned
     */
    readonly dataset?: pulumi.Input<string>;
    /**
     * Whether to enable deletion protection for this machine
     */
    readonly deletionProtectionEnabled?: pulumi.Input<boolean>;
    /**
     * Amount of disk allocated to the machine (in Gb)
     */
    readonly disk?: pulumi.Input<number>;
    /**
     * List of domain names from Triton CNS
     */
    readonly domainNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether to enable the firewall for this machine
     */
    readonly firewallEnabled?: pulumi.Input<boolean>;
    /**
     * UUID of the image
     */
    readonly image?: pulumi.Input<string>;
    /**
     * IP addresses assigned to the machine
     */
    readonly ips?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * UUID based locality hints for assisting placement behavior
     */
    readonly locality?: pulumi.Input<{ closeTos?: pulumi.Input<pulumi.Input<string>[]>, farFroms?: pulumi.Input<pulumi.Input<string>[]> }>;
    /**
     * Amount of memory allocated to the machine (in Mb)
     */
    readonly memory?: pulumi.Input<number>;
    /**
     * Machine metadata
     */
    readonly metadata?: pulumi.Input<{[key: string]: any}>;
    /**
     * Friendly name for machine
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Desired network IDs
     */
    readonly networks?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Network interface
     */
    readonly nics?: pulumi.Input<pulumi.Input<{ gateway?: pulumi.Input<string>, ip?: pulumi.Input<string>, mac?: pulumi.Input<string>, netmask?: pulumi.Input<string>, network: pulumi.Input<string>, primary?: pulumi.Input<boolean>, state?: pulumi.Input<string> }>[]>;
    /**
     * The package for use for provisioning
     */
    readonly package?: pulumi.Input<string>;
    /**
     * Primary (public) IP address for the machine
     */
    readonly primaryip?: pulumi.Input<string>;
    /**
     * Authorized keys for the root user on this machine
     */
    readonly rootAuthorizedKeys?: pulumi.Input<string>;
    /**
     * Machine tags
     */
    readonly tags?: pulumi.Input<{[key: string]: any}>;
    /**
     * Machine type (smartmachine or virtualmachine)
     */
    readonly type?: pulumi.Input<string>;
    /**
     * When the machine was updated
     */
    readonly updated?: pulumi.Input<string>;
    /**
     * Data copied to machine on boot
     */
    readonly userData?: pulumi.Input<string>;
    /**
     * User script to run on boot (every boot on SmartMachines)
     */
    readonly userScript?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Machine resource.
 */
export interface MachineArgs {
    /**
     * Administrator's initial password (Windows only)
     */
    readonly administratorPw?: pulumi.Input<string>;
    /**
     * Label based affinity rules for assisting instance placement
     */
    readonly affinities?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * copied to machine on boot
     */
    readonly cloudConfig?: pulumi.Input<string>;
    /**
     * Container Name Service
     */
    readonly cns?: pulumi.Input<{ disable?: pulumi.Input<boolean>, services?: pulumi.Input<pulumi.Input<string>[]> }>;
    /**
     * Whether to enable deletion protection for this machine
     */
    readonly deletionProtectionEnabled?: pulumi.Input<boolean>;
    /**
     * Whether to enable the firewall for this machine
     */
    readonly firewallEnabled?: pulumi.Input<boolean>;
    /**
     * UUID of the image
     */
    readonly image: pulumi.Input<string>;
    /**
     * UUID based locality hints for assisting placement behavior
     */
    readonly locality?: pulumi.Input<{ closeTos?: pulumi.Input<pulumi.Input<string>[]>, farFroms?: pulumi.Input<pulumi.Input<string>[]> }>;
    /**
     * Machine metadata
     */
    readonly metadata?: pulumi.Input<{[key: string]: any}>;
    /**
     * Friendly name for machine
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Desired network IDs
     */
    readonly networks?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Network interface
     */
    readonly nics?: pulumi.Input<pulumi.Input<{ gateway?: pulumi.Input<string>, ip?: pulumi.Input<string>, mac?: pulumi.Input<string>, netmask?: pulumi.Input<string>, network: pulumi.Input<string>, primary?: pulumi.Input<boolean>, state?: pulumi.Input<string> }>[]>;
    /**
     * The package for use for provisioning
     */
    readonly package: pulumi.Input<string>;
    /**
     * Authorized keys for the root user on this machine
     */
    readonly rootAuthorizedKeys?: pulumi.Input<string>;
    /**
     * Machine tags
     */
    readonly tags?: pulumi.Input<{[key: string]: any}>;
    /**
     * Data copied to machine on boot
     */
    readonly userData?: pulumi.Input<string>;
    /**
     * User script to run on boot (every boot on SmartMachines)
     */
    readonly userScript?: pulumi.Input<string>;
}

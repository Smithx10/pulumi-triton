// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";

export class ServiceGroup extends pulumi.CustomResource {
    /**
     * Get an existing ServiceGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceGroupState): ServiceGroup {
        return new ServiceGroup(name, <any>state, { id });
    }

    /**
     * Number of instances to launch and monitor
     */
    public readonly capacity: pulumi.Output<number>;
    /**
     * Friendly name for the service group
     */
    public readonly groupName: pulumi.Output<string>;
    /**
     * Identifier of an instance template
     */
    public readonly template: pulumi.Output<string>;

    /**
     * Create a ServiceGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceGroupArgs | ServiceGroupState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: ServiceGroupState = argsOrState as ServiceGroupState | undefined;
            inputs["capacity"] = state ? state.capacity : undefined;
            inputs["groupName"] = state ? state.groupName : undefined;
            inputs["template"] = state ? state.template : undefined;
        } else {
            const args = argsOrState as ServiceGroupArgs | undefined;
            if (!args || args.groupName === undefined) {
                throw new Error("Missing required property 'groupName'");
            }
            if (!args || args.template === undefined) {
                throw new Error("Missing required property 'template'");
            }
            inputs["capacity"] = args ? args.capacity : undefined;
            inputs["groupName"] = args ? args.groupName : undefined;
            inputs["template"] = args ? args.template : undefined;
        }
        super("triton:index/serviceGroup:ServiceGroup", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ServiceGroup resources.
 */
export interface ServiceGroupState {
    /**
     * Number of instances to launch and monitor
     */
    readonly capacity?: pulumi.Input<number>;
    /**
     * Friendly name for the service group
     */
    readonly groupName?: pulumi.Input<string>;
    /**
     * Identifier of an instance template
     */
    readonly template?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ServiceGroup resource.
 */
export interface ServiceGroupArgs {
    /**
     * Number of instances to launch and monitor
     */
    readonly capacity?: pulumi.Input<number>;
    /**
     * Friendly name for the service group
     */
    readonly groupName: pulumi.Input<string>;
    /**
     * Identifier of an instance template
     */
    readonly template: pulumi.Input<string>;
}
